# Azure DevOps CI/CD Pipeline for Daily Mess Feedback System
# This pipeline builds both frontend and backend, then deploys to Azure

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*

variables:
  # Build configuration
  buildConfiguration: 'Release'
  nodeVersion: '18.x'
  
  # Azure service connection names (to be configured in Azure DevOps)
  azureSubscription: 'Azure-ServiceConnection'
  
  # Azure resources
  resourceGroupName: 'rg-mess-feedback-system'
  backendAppName: 'app-mess-feedback-backend'
  frontendAppName: 'app-mess-feedback-frontend'
  sqlServerName: 'dailyfeedbacksystem'
  sqlDatabaseName: 'messdata'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildBackend
    displayName: 'Build Backend'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'
    
    - script: |
        cd backend
        npm ci
        npm run build
      displayName: 'Install dependencies and build backend'
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'backend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend-$(Build.BuildId).zip'
        replaceExistingArchive: true
      displayName: 'Archive backend files'
    
    - publish: '$(Build.ArtifactStagingDirectory)/backend-$(Build.BuildId).zip'
      artifact: backend
      displayName: 'Publish backend artifact'

  - job: BuildFrontend
    displayName: 'Build Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'
    
    - script: |
        cd frontend
        npm ci
        npm run build
      displayName: 'Install dependencies and build frontend'
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'frontend/dist'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend-$(Build.BuildId).zip'
        replaceExistingArchive: true
      displayName: 'Archive frontend build files'
    
    - publish: '$(Build.ArtifactStagingDirectory)/frontend-$(Build.BuildId).zip'
      artifact: frontend
      displayName: 'Publish frontend artifact'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  
  jobs:
  - deployment: DeployBackend
    displayName: 'Deploy Backend to Azure App Service'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: backend
            displayName: 'Download backend artifact'
          
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(backendAppName)'
              runtimeStack: 'NODE|18-lts'
              package: '$(Pipeline.Workspace)/backend/backend-$(Build.BuildId).zip'
              appSettings: |
                -DB_SERVER $(sqlServerName).database.windows.net
                -DB_NAME $(sqlDatabaseName)
                -DB_USER $(DB_USER)
                -DB_PASSWORD $(DB_PASSWORD)
                -JWT_SECRET $(JWT_SECRET)
                -PORT 8080
            displayName: 'Deploy backend to Azure App Service'

  - deployment: DeployFrontend
    displayName: 'Deploy Frontend to Azure Static Web Apps'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend
            displayName: 'Download frontend artifact'
          
          - task: AzureStaticWebApp@0
            inputs:
              azure_static_web_apps_api_token: '$(AZURE_STATIC_WEB_APPS_API_TOKEN)'
              app_location: '/'
              api_location: ''
              output_location: ''
              skip_app_build: true
              app_build_command: ''
            displayName: 'Deploy frontend to Azure Static Web Apps'
