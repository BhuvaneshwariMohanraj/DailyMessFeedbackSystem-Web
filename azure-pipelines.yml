# Azure DevOps CI/CD Pipeline for Daily Mess Feedback System

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*

variables:
  buildConfiguration: 'Release'
  nodeVersion: '20.x'
  azureSubscription: 'Azure-ServiceConnection'
  resourceGroupName: 'mess_fb'
  backendAppName: 'app-mess-feedback-backend'
  frontendAppName: 'app-mess-feedback-frontend'
  sqlServerName: 'dailyfeedbacksystem'
  sqlDatabaseName: 'messdata'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildAll
    displayName: 'Build Frontend and Backend'
    pool:
       name: 'Default'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'
    
    - script: |
        echo "Building Frontend..."
        cd frontend
        call npm ci
        if errorlevel 1 exit /b 1
        call npm run build
        if errorlevel 1 exit /b 1
        echo "Frontend build completed!"
      displayName: 'Build Frontend'
    
    - script: |
        echo "Building Backend..."
        cd backend
        call npm ci
        if errorlevel 1 exit /b 1
        call npm run build
        if errorlevel 1 exit /b 1
        echo "Backend build completed!"
      displayName: 'Build Backend'
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'frontend/dist'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend-$(Build.BuildId).zip'
        replaceExistingArchive: true
      displayName: 'Archive Frontend Build'
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'backend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend-$(Build.BuildId).zip'
        replaceExistingArchive: true
      displayName: 'Archive Backend Build'
    
    - publish: '$(Build.ArtifactStagingDirectory)/frontend-$(Build.BuildId).zip'
      artifact: frontend
      displayName: 'Publish Frontend Artifact'
    
    - publish: '$(Build.ArtifactStagingDirectory)/backend-$(Build.BuildId).zip'
      artifact: backend
      displayName: 'Publish Backend Artifact'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  
  jobs:
  - deployment: DeployBackend
    displayName: 'Deploy Backend to Azure App Service'
    pool:
      name: 'Default'
    environment: 'production'
    
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: backend
            displayName: 'Download backend artifact'
          
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(backendAppName)'
              runtimeStack: 'NODE|20-lts'
              package: '$(Pipeline.Workspace)/backend/backend-$(Build.BuildId).zip'
              appSettings: '-DB_SERVER $(sqlServerName).database.windows.net -DB_NAME $(sqlDatabaseName) -DB_USER $(DB_USER) -DB_PASSWORD $(DB_PASSWORD) -JWT_SECRET $(JWT_SECRET) -PORT 8080'
            displayName: 'Deploy backend to Azure App Service'

  - deployment: DeployFrontend
    displayName: 'Deploy Frontend'
    pool:
      name: 'Default'
    environment: 'production'
    
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend
            displayName: 'Download frontend artifact'
          
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/frontend/frontend-$(Build.BuildId).zip'
              destinationFolder: '$(Pipeline.Workspace)/frontend-extracted'
              cleanDestinationFolder: true
            displayName: 'Extract Frontend Files'
          
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Installing SWA CLI..."
                npm install -g @azure/static-web-apps-cli
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "Failed to install SWA CLI"
                    exit 1
                }
                
                Write-Host "Deploying to Static Web App..."
                Set-Location "$(Pipeline.Workspace)/frontend-extracted"
                
                swa deploy . --deployment-token $(AZURE_STATIC_WEB_APPS_API_TOKEN) --no-use-keychain
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "Deployment failed"
                    exit 1
                }
                
                Write-Host "Frontend deployed successfully!"
              errorActionPreference: 'stop'
            displayName: 'Deploy Frontend to Static Web App'
