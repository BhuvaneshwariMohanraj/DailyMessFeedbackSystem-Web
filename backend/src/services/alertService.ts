import * as nodemailer from 'nodemailer';

interface AlertConfig {
  email?: {
    enabled: boolean;
    recipients: string[];
  };
  sms?: {
    enabled: boolean;
    recipients: string[];
  };
  push?: {
    enabled: boolean;
  };
}

interface FeedbackAlert {
  feedbackId: number;
  priority_score: number;
  priority_level: string;
  category: string;
  summary: string;
  student_name?: string;
  meal_type: string;
  timestamp: Date;
  health_safety_concern: boolean;
}

class AlertService {
  private emailTransporter: nodemailer.Transporter | null = null;
  private io: any = null; // Socket.io instance

  constructor() {
    this.initializeEmailService();
  }

  setSocketIO(socketIO: any) {
    this.io = socketIO;
  }

  private initializeEmailService() {
    if (process.env.EMAIL_HOST && process.env.EMAIL_USER && process.env.EMAIL_PASS) {
      this.emailTransporter = nodemailer.createTransport({
        host: process.env.EMAIL_HOST,
        port: parseInt(process.env.EMAIL_PORT || '587'),
        secure: process.env.EMAIL_SECURE === 'true',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
      });
    } else {
      console.warn('‚ö†Ô∏è Email service not configured. Set EMAIL_HOST, EMAIL_USER, EMAIL_PASS in environment variables.');
    }
  }

  async triggerAlerts(feedbackData: FeedbackAlert) {
    const { priority_score, priority_level, health_safety_concern } = feedbackData;

    try {
      // Real-time dashboard alerts (always send)
      await this.sendDashboardAlert(feedbackData);

      // Email alerts based on priority
      if (priority_score >= 8) {
        await this.sendEmailAlert(feedbackData);
      }

      // SMS alerts for critical issues (placeholder - would need SMS service)
      if (priority_score >= 9 || health_safety_concern) {
        await this.sendSMSAlert(feedbackData);
      }

      console.log(`‚úÖ Alerts triggered for feedback ${feedbackData.feedbackId} (Priority: ${priority_level})`);
      
    } catch (error) {
      console.error('‚ùå Error triggering alerts:', error);
    }
  }

  private async sendDashboardAlert(feedbackData: FeedbackAlert) {
    if (this.io) {
      // Emit real-time alert to admin dashboard
      this.io.emit('urgent-alert', {
        id: feedbackData.feedbackId,
        priority: feedbackData.priority_score,
        level: feedbackData.priority_level,
        category: feedbackData.category,
        message: feedbackData.summary,
        mealType: feedbackData.meal_type,
        timestamp: feedbackData.timestamp,
        healthConcern: feedbackData.health_safety_concern
      });

      console.log(`üì° Real-time alert sent to dashboard for feedback ${feedbackData.feedbackId}`);
    }
  }

  private async sendEmailAlert(feedbackData: FeedbackAlert) {
    if (!this.emailTransporter) {
      console.log('üìß Email service not configured, skipping email alert');
      return;
    }

    const { priority_score, priority_level, category, summary, meal_type, health_safety_concern } = feedbackData;
    
    const urgencyIcon = priority_score >= 9 ? 'üö®' : '‚ö†Ô∏è';
    const subject = `${urgencyIcon} ${priority_level} Mess Issue - ${category}`;
    
    const emailBody = `
      <h2>${urgencyIcon} ${priority_level} Priority Mess Feedback Alert</h2>
      
      <div style="background-color: ${priority_score >= 9 ? '#fee2e2' : '#fef3c7'}; padding: 15px; border-radius: 8px; margin: 10px 0;">
        <p><strong>Priority Score:</strong> ${priority_score}/10</p>
        <p><strong>Category:</strong> ${category}</p>
        <p><strong>Meal Type:</strong> ${meal_type}</p>
        <p><strong>Health/Safety Concern:</strong> ${health_safety_concern ? 'YES ‚ö†Ô∏è' : 'No'}</p>
        <p><strong>Time:</strong> ${feedbackData.timestamp.toLocaleString()}</p>
      </div>
      
      <h3>Summary:</h3>
      <p>${summary}</p>
      
      <div style="background-color: #f3f4f6; padding: 10px; border-radius: 5px; margin-top: 15px;">
        <p><strong>Recommended Action:</strong> ${priority_score >= 9 ? 'Immediate investigation and response required' : 'Review and address within 24 hours'}</p>
      </div>
      
      <hr>
      <p style="font-size: 12px; color: #666;">
        This alert was automatically generated by the Daily Mess Feedback System AI.
        <br>Feedback ID: ${feedbackData.feedbackId}
      </p>
    `;

    const recipients = process.env.ADMIN_EMAIL_RECIPIENTS?.split(',') || ['admin@mess.com'];

    try {
      await this.emailTransporter.sendMail({
        from: process.env.EMAIL_FROM || process.env.EMAIL_USER,
        to: recipients,
        subject,
        html: emailBody,
      });

      console.log(`üìß Email alert sent for feedback ${feedbackData.feedbackId} to ${recipients.join(', ')}`);
    } catch (error) {
      console.error('‚ùå Failed to send email alert:', error);
    }
  }

  private async sendSMSAlert(feedbackData: FeedbackAlert) {
    // Placeholder for SMS integration
    // You would integrate with services like Twilio, AWS SNS, etc.
    
    const message = `URGENT MESS ALERT: ${feedbackData.category} issue reported. Priority: ${feedbackData.priority_score}/10. ${feedbackData.summary.substring(0, 100)}...`;
    
    console.log(`üì± SMS Alert (placeholder): ${message}`);
    
    // Example Twilio integration (commented out):
    /*
    if (process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN) {
      const client = require('twilio')(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
      
      const recipients = process.env.ADMIN_PHONE_NUMBERS?.split(',') || [];
      
      for (const phoneNumber of recipients) {
        try {
          await client.messages.create({
            body: message,
            from: process.env.TWILIO_PHONE_NUMBER,
            to: phoneNumber
          });
        } catch (error) {
          console.error(`Failed to send SMS to ${phoneNumber}:`, error);
        }
      }
    }
    */
  }

  // Get alert statistics for dashboard
  async getAlertStats(timeframe: 'today' | 'week' | 'month' = 'today') {
    // This would typically query the database for alert statistics
    // For now, returning placeholder data
    return {
      total_alerts: 0,
      urgent_alerts: 0,
      high_priority: 0,
      health_safety_alerts: 0,
      timeframe
    };
  }

  // Test alert system
  async testAlerts() {
    const testAlert: FeedbackAlert = {
      feedbackId: 999,
      priority_score: 9,
      priority_level: 'URGENT',
      category: 'Health Safety',
      summary: 'Test alert - please ignore',
      meal_type: 'lunch',
      timestamp: new Date(),
      health_safety_concern: true
    };

    await this.triggerAlerts(testAlert);
    return { message: 'Test alerts sent successfully' };
  }
}

export default new AlertService();
